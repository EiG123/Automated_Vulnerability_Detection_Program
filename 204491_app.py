import pexpect
import subprocess
import json
import time
import requests
from pymetasploit3.msfrpc import MsfRpcClient

def run_nmap(target):
    command = f"nmap -sV -oX ./allresults/nmap_results.xml {target}"
    subprocess.run(command, shell=True)

def run_nikto(target):
    # Adjusting the command for Windows environment
    command = f"nikto -h {target} -o ./allresults/nikto_results.xml"
    subprocess.run(command, shell=True)
    while True:
        try:
            child.expect(['(y/n)', pexpect.EOF, pexpect.TIMEOUT])
            child.sendline('n')
        except pexpect.exceptions.EOF:
            break
        except pexpect.exceptions.TIMEOUT:
            break

def run_zap(target):
    # Path to ZAP in Windows environment
    zap_path = r"./ZAP_2.15.0/zap.sh"  # Adjust to the correct path to zap.bat
    api_key = "pu4vgbomo7jo4tr3au66ols6f8"
    port = "8090"
    
    # Start ZAP in daemon mode
    command = f"{zap_path} -daemon -port {port} -config api.key={api_key}"
    subprocess.run(command, shell=True)
    
    # Allow ZAP to fully start
    time.sleep(30)
    
    # Active Scan the target
    scan_url = f"http://localhost:{port}/JSON/ascan/action/scan/?apikey={api_key}&url={target}&recurse=true&scanPolicyName=Default Policy"
    response = requests.get(scan_url)
    
    # Check if scan started successfully
    if response.status_code == 200:
        scan_id = response.json().get('scan')
        print(f"Scan started with ID: {scan_id}")
        
        # Polling the status of the scan
        status_url = f"http://localhost:{port}/JSON/ascan/view/status/?apikey={api_key}&scanId={scan_id}"
        while True:
            status_response = requests.get(status_url)
            status = int(status_response.json().get('status'))
            print(f"Scan status: {status}%")
            if status >= 100:
                break
            time.sleep(10)
        
        # Fetch the report
        report_url = f"http://localhost:{port}/OTHER/core/other/htmlreport/?apikey={api_key}"
        report_response = requests.get(report_url)
        with open(r"C:\Path\To\Save\zap_results.html", "wb") as report_file:
            report_file.write(report_response.content)
        print("Report saved to zap_results.html")
    else:
        print("Failed to start scan")

def run_metasploit(target, port):
    client = MsfRpcClient('a0894903526247', server='127.0.0.1', port=55552)
    exploit = client.modules.use('exploit', 'exploit_name')
    exploit['RHOSTS'] = target
    exploit['RPORT'] = port
    payload = client.modules.use('payload', 'payload_name')
    exploit.execute(payload=payload)

def combine_results():
    results = {}

    with open("./allresults/nmap_results.xml", "r") as file:
        nmap_results = file.read()
    results['nmap'] = nmap_results

    with open("./allresults/nikto_results.xml", "r") as file:
        nikto_results = file.read()
    results['nikto'] = nikto_results

    with open("./allresults/zap_results.xml", "r") as file:
        zap_results = file.read()
    results['zap'] = zap_results

    with open("./allresults/combined_results.xml", "w") as file:
        json.dump(results, file, indent=4)

    return results

def main():
    target = input("Enter the target URL or IP: ")
    run_nmap(target)
    run_nikto(target)
    run_zap(target)
    
    # Read Nmap results to get open ports
    with open("nmap_results.xml", "r") as file:
        nmap_results = file.read()
        # Parse Nmap results to get open ports (this part needs a proper XML parser)

    open_ports = [80, 443]  # Example ports, replace with actual parsing results

    #for port in open_ports:
       # run_metasploit(target, port)

    results = combine_results()
    print("Scanning complete. Results saved to combined_results.json")

if __name__ == "__main__":
    main()
