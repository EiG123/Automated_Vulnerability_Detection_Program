import pexpect
import subprocess
import json
import time
import requests
import logging
from pymetasploit3.msfrpc import MsfRpcClient


def run_nmap(target):
    command = f"nmap -sS -oX ./allresults/nmap_results.txt -p 80,443 -A {target}"
    subprocess.run(command, shell=True)

def run_nikto(target):
    command = f"nikto -h {target} -o ./allresults/nikto_results.txt -C all -Display V -Tuning 123456789abcde"
    subprocess.run(command, shell=True)

def run_zap(target):
    zap_path = r"./ZAP_2.15.0/zap.sh"
    api_key = "pu4vgbomo7jo4tr3au66ols6f8"
    port = "8090"
    
    try:
        print("Starting ZAP in daemon mode...")
        command = f"{zap_path} -daemon -port {port} -config api.key={api_key}"
        process = subprocess.Popen(command, shell=True)
        print("ZAP started, waiting for it to initialize...")
        
        time.sleep(30)
        
        print("Starting spidering...")
        spider_url = f"http://localhost:{port}/JSON/spider/action/scan/?apikey={api_key}&url={target}&recurse=true"
        spider_response = requests.get(spider_url)
        print(f"Spidering response: {spider_response.status_code}")
        print(f"Spidering Response Text: {spider_response.text}")
        
        if spider_response.status_code == 200:
            spider_id = spider_response.json().get('scan')
            print(f"Spider started with ID: {spider_id}")
            
            spider_status_url = f"http://localhost:{port}/JSON/spider/view/status/?apikey={api_key}&scanId={spider_id}"
            while True:
                spider_status_response = requests.get(spider_status_url)
                spider_status = int(spider_status_response.json().get('status'))
                print(f"Spider status: {spider_status}%")
                if spider_status >= 100:
                    break
                time.sleep(5)
        
        print("Starting active scan...")
        scan_url = f"http://localhost:{port}/JSON/ascan/action/scan/?apikey={api_key}&url={target}&recurse=true&tuning=123456789abc"
        response = requests.get(scan_url)
        print(f"Received response: {response.status_code}")
        print(f"Response Text: {response.text}")
        
        if response.status_code == 200:
            scan_id = response.json().get('scan')
            print(f"Scan started with ID: {scan_id}")
            
            status_url = f"http://localhost:{port}/JSON/ascan/view/status/?apikey={api_key}&scanId={scan_id}"
            while True:
                status_response = requests.get(status_url)
                status = int(status_response.json().get('status'))
                print(f"Scan status: {status}%")
                if status >= 100:
                    break
                time.sleep(5)
            
            print("Fetching the report...")
            report_url = f"http://localhost:{port}/OTHER/core/other/htmlreport/?apikey={api_key}"
            report_response = requests.get(report_url)
            if not ("./allresuls/zap_result.txt"):
                with open("./allresults/zap_results.txt", "w") as outfile:
                    outfile.write("")
                print("mkdir zap_results.txt")
            with open("./allresults/zap_results.txt", "wb") as report_file:
                report_file.write(report_response.content)
            print("Report saved to zap_results.txt")
        else:
            print("Failed to start scan")
    
    except subprocess.CalledProcessError as e:
        print(f"Error starting ZAP: {e}")
    except requests.RequestException as e:
        print(f"HTTP request failed: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        process.terminate()

          
def test_zap(target):
    zap_path = r"./ZAP_2.15.0/zap.sh"
    api_key = "pu4vgbomo7jo4tr3au66ols6f8"
    port = "8090"

    try:
        print("Starting ZAP in daemon mode...")
        command = f"{zap_path} -daemon -port {port} -config api.key={api_key}"
        process = subprocess.Popen(command, shell=True)
        print("ZAP started, waiting for it to initialize...")


        # Spider Scan
        spider_url = f"http://localhost:{port}/JSON/spider/action/scan/?apikey={api_key}&url={target}&recurse=true"
        spider_response = requests.get(spider_url)

        if spider_response.status_code == 200:
            spider_id = spider_response.json().get('scan')
            if spider_id:
                print(f"Spider started with ID: {spider_id}")
                
                spider_status_url = f"http://localhost:{port}/JSON/spider/view/status/?apikey={api_key}&scanId={spider_id}"
                while True:
                    spider_status_response = requests.get(spider_status_url)
                    spider_status = int(spider_status_response.json().get('status'))
                    print(f"Spider status: {spider_status}%")
                    if spider_status >= 100:
                        print("Spider scan completed!")
                        break
                    time.sleep(5)
            else:
                print("Failed to get Spider ID.")
        else:
            print(f"Failed to start Spider scan. Status code: {spider_response.status_code}")

        # Active Scan
        scan_url = f"http://localhost:{port}/JSON/ascan/action/scan/?apikey={api_key}&url={target}&recurse=true&tuning=123456789abc"
        scan_response = requests.get(scan_url)

        if scan_response.status_code == 200:
            scan_id = scan_response.json().get('scan')
            if scan_id:
                print(f"Active Scan started with ID: {scan_id}")

                status_url = f"http://localhost:{port}/JSON/ascan/view/status/?apikey={api_key}&scanId={scan_id}"
                while True:
                    status_response = requests.get(status_url)
                    status = int(status_response.json().get('status'))
                    print(f"Active Scan status: {status}%")
                    if status >= 100:
                        print("Active scan completed!")
                        break
                    time.sleep(5)
            else:
                print("Failed to get Active Scan ID.")
        else:
            print(f"Failed to start Active Scan. Status code: {scan_response.status_code}")

        # Fetching Alerts and saving to file
        alerts_url = f"http://localhost:{port}/JSON/core/view/alerts/?apikey={api_key}&baseurl={target}"
        alerts_response = requests.get(alerts_url)

        if alerts_response.status_code == 200:
            alerts = alerts_response.json().get('alerts')
            if alerts:
                print("Alerts found:")
                
                # Save alerts to file
                with open("./allresults/zap_results.txt", "w") as file:
                    for alert in alerts:
                        alert_text = (f"Alert: {alert.get('alert')}, "
                                      f"Risk: {alert.get('risk')}, "
                                      f"URL: {alert.get('url')}\n")
                        file.write(alert_text)
                        print(alert_text)
                print(f"Results saved")
            else:
                print("No alerts found.")
        else:
            print(f"Failed to fetch alerts. Status code: {alerts_response.status_code}")

    except requests.RequestException as e:
        print(f"Error occurred during HTTP request: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")



# def run_metasploit(target, port):
#     client = MsfRpcClient('a0894903526247', server='127.0.0.1', port=55552)
#     exploit = client.modules.use('exploit', 'exploit_name')
#     exploit['RHOSTS'] = target
#     exploit['RPORT'] = port
#     payload = client.modules.use('payload', 'payload_name')
#     exploit.execute(payload=payload)

def combine_results():
    results = {}

    with open("./allresults/nmap_results.txt", "r") as file:
        nmap_results = file.read()
    results['nmap'] = nmap_results

    with open("./allresults/nikto_results.txt", "r") as file:
        nikto_results = file.read()
    results['nikto'] = nikto_results

    with open("./allresults/zap_results.txt", "r") as file:
        zap_results = file.read()
    results['zap'] = zap_results

    with open("./allresults/combined_results.txt", "w") as file:
        json.dump(results, file, indent=4)

    return results

def main():
    target = input("Enter the target URL or IP: ")
    #run_nmap(target)
    run_nikto(target)
    #run_zap(target)
    
    # Read Nmap results to get open ports
    # with open("./allresults/nmap_results.xml", "r") as file:
    #     nmap_results = file.read()
        # Parse Nmap results to get open ports (this part needs a proper XML parser)

    open_ports = [80, 443]  # Example ports, replace with actual parsing results

    #for port in open_ports:
       # run_metasploit(target, port)

    results = combine_results()
    print("Scanning complete. Results saved to combined_results.json")

if __name__ == "__main__":
    main()
