import subprocess
import time
import requests
import tkinter as tk
from tkinter import filedialog

def run_zap(target, status_label, report_label):
    # Path to ZAP in Windows environment
    zap_path = r"./ZAP_2.15.0/zap.sh"  # Adjust to the correct path to zap.bat
    api_key = "pu4vgbomo7jo4tr3au66ols6f8"
    port = "8090"
    
    try:
        status_label.config(text="Starting ZAP in daemon mode...")
        root.update()
        command = f"{zap_path} -daemon -port {port} -config api.key={api_key}"
        subprocess.run(command, shell=True)
        
        status_label.config(text="ZAP started, waiting for it to initialize...")
        root.update()
        time.sleep(30)
        
        status_label.config(text="Attempting to start active scan...")
        root.update()
        # Active Scan the target
        scan_url = f"http://localhost:{port}/JSON/ascan/action/scan/?apikey={api_key}&url={target}&recurse=true&scanPolicyName=Default Policy"
        response = requests.get(scan_url)
        
        if response.status_code == 200:
            scan_id = response.json().get('scan')
            status_label.config(text=f"Scan started with ID: {scan_id}")
            root.update()
            
            # Polling the status of the scan
            status_url = f"http://localhost:{port}/JSON/ascan/view/status/?apikey={api_key}&scanId={scan_id}"
            while True:
                status_response = requests.get(status_url)
                status = int(status_response.json().get('status'))
                status_label.config(text=f"Scan status: {status}%")
                root.update()
                if status >= 100:
                    break
                time.sleep(5)  # Update status every 5 seconds
            
            # Fetch the report
            status_label.config(text="Fetching the report...")
            root.update()
            report_url = f"http://localhost:{port}/OTHER/core/other/htmlreport/?apikey={api_key}"
            report_response = requests.get(report_url)
            
            # Ask user where to save the report
            save_path = filedialog.asksaveasfilename(defaultextension=".html", filetypes=[("HTML files", "*.html")])
            if save_path:
                with open(save_path, "wb") as report_file:
                    report_file.write(report_response.content)
                report_label.config(text=f"Report saved to {save_path}")
            else:
                report_label.config(text="Report not saved.")
            root.update()
        else:
            status_label.config(text="Failed to start scan")
            root.update()
    
    except subprocess.CalledProcessError as e:
        status_label.config(text=f"Error starting ZAP: {e}")
        root.update()
    except requests.RequestException as e:
        status_label.config(text=f"HTTP request failed: {e}")
        root.update()
    except Exception as e:
        status_label.config(text=f"An error occurred: {e}")
        root.update()

def start_scan():
    target = target_entry.get()
    run_zap(target, status_label, report_label)

# Create the main window
root = tk.Tk()
root.title("ZAP Scan Tool")

# Target URL entry
tk.Label(root, text="Target URL:").grid(row=0, column=0, padx=10, pady=10)
target_entry = tk.Entry(root, width=50)
target_entry.grid(row=0, column=1, padx=10, pady=10)

# Start button
start_button = tk.Button(root, text="Start Scan", command=start_scan)
start_button.grid(row=1, column=0, columnspan=2, pady=10)

# Status label
status_label = tk.Label(root, text="Status: Waiting to start...")
status_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Report label
report_label = tk.Label(root, text="Report: Not generated yet.")
report_label.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

# Run the application
root.mainloop()
