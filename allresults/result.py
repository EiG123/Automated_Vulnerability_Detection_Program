from bs4 import BeautifulSoup

def parse_zap_report(input_file_path, output_file_path):
    # เปิดและอ่านไฟล์
    with open(input_file_path, 'r', encoding='utf-8') as file:
        content = file.read()

    # ใช้ BeautifulSoup ในการแปลง HTML เป็นวัตถุที่สามารถจัดการได้
    soup = BeautifulSoup(content, 'html.parser')
    
    # ดึงข้อมูลสรุประดับความเสี่ยง
    risk_summary = soup.find('table', class_='summary')
    risk_rows = risk_summary.find_all('tr')[1:]  # ข้ามหัวข้อของตาราง

    risks = {}
    for row in risk_rows:
        cells = row.find_all('td')
        risk_level = cells[0].text.strip()
        risk_count = int(cells[1].text.strip())
        risks[risk_level] = risk_count
    
    # ดึงรายละเอียดของช่องโหว่
    alerts = soup.find('table', class_='alerts')
    alert_rows = alerts.find_all('tr')[1:]  # ข้ามหัวข้อของตาราง

    details = []
    for row in alert_rows:
        cells = row.find_all('td')
        name = cells[0].text.strip()
        risk_level = cells[1].text.strip()
        instances = cells[2].text.strip()
        details.append({'name': name, 'risk_level': risk_level, 'instances': instances})

    # สรุปผลออกมาเป็นข้อ ๆ
    summary = []
    for detail in details:
        summary.append(f"- {detail['risk_level']} Risk: {detail['name']} ({detail['instances']} instances)")

    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        output_file.write(str(soup))

    return summary

# เรียกใช้ฟังก์ชันเพื่ออ่านไฟล์ ZAP และสรุปผล
input_file_path = 'zap_results.txt'  # เปลี่ยนชื่อไฟล์ตามต้องการ
output_file_path = 'zap_results_processed.html'
result = parse_zap_report(input_file_path, output_file_path)

# พิมพ์ผลลัพธ์ที่สรุปออกมา
for item in result:
    print(item)
