import subprocess
import time
import requests

def wait_for_zap(port, timeout=60):
    """Wait until ZAP is ready to accept requests."""
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"http://localhost:{port}/JSON/")
            if response.status_code == 200:
                print("ZAP is ready.")
                return True
        except requests.RequestException:
            pass
        time.sleep(5)
    print("Timed out waiting for ZAP.")
    return False

def run_zap(target):
    # Path to ZAP in Windows environment
    zap_path = r"./ZAP_2.15.0/zap.sh"  # Adjust to the correct path to zap.bat
    api_key = "pu4vgbomo7jo4tr3au66ols6f8"
    port = "8090"
    
    try:
        print("Starting ZAP in daemon mode...")
        # Start ZAP in the background
        command = f"{zap_path} -daemon -port {port} -config api.key={api_key}"
        process = subprocess.Popen(command, shell=True)
        print("ZAP started, waiting for it to initialize...")
        
        # Wait until ZAP is ready
        if not wait_for_zap(port):
            print("Failed to connect to ZAP. Exiting.")
            return
        
        print("Attempting to start active scan...")
        # Active Scan the target
        scan_url = f"http://localhost:{port}/JSON/ascan/action/scan/?apikey={api_key}&url={target}&recurse=true&scanPolicyName=Default Policy"
        response = requests.get(scan_url)
        
        if response.status_code == 200:
            scan_id = response.json().get('scan')
            print(f"Scan started with ID: {scan_id}")
            
            # Polling the status of the scan
            status_url = f"http://localhost:{port}/JSON/ascan/view/status/?apikey={api_key}&scanId={scan_id}"
            while True:
                status_response = requests.get(status_url)
                status = int(status_response.json().get('status'))
                print(f"Scan status: {status}%")
                if status >= 100:
                    break
                time.sleep(5)  # Update status every 5 seconds
            
            # Fetch the report
            print("Fetching the report...")
            report_url = f"http://localhost:{port}/OTHER/core/other/htmlreport/?apikey={api_key}"
            report_response = requests.get(report_url)
            with open(r"C:\Path\To\Save\zap_results.html", "wb") as report_file:
                report_file.write(report_response.content)
            print("Report saved to zap_results.html")
        else:
            print("Failed to start scan")
    
    except subprocess.CalledProcessError as e:
        print(f"Error starting ZAP: {e}")
    except requests.RequestException as e:
        print(f"HTTP request failed: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage:
run_zap("http://localhost:3000")

